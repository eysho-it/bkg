/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GpuService } from "../gpu.service";
import { GpuCreateInput } from "./GpuCreateInput";
import { Gpu } from "./Gpu";
import { GpuFindManyArgs } from "./GpuFindManyArgs";
import { GpuWhereUniqueInput } from "./GpuWhereUniqueInput";
import { GpuUpdateInput } from "./GpuUpdateInput";

export class GpuControllerBase {
  constructor(protected readonly service: GpuService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Gpu })
  async createGpu(@common.Body() data: GpuCreateInput): Promise<Gpu> {
    return await this.service.createGpu({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Gpu] })
  @ApiNestedQuery(GpuFindManyArgs)
  async gpus(@common.Req() request: Request): Promise<Gpu[]> {
    const args = plainToClass(GpuFindManyArgs, request.query);
    return this.service.gpus({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Gpu })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async gpu(@common.Param() params: GpuWhereUniqueInput): Promise<Gpu | null> {
    const result = await this.service.gpu({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Gpu })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateGpu(
    @common.Param() params: GpuWhereUniqueInput,
    @common.Body() data: GpuUpdateInput
  ): Promise<Gpu | null> {
    try {
      return await this.service.updateGpu({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Gpu })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteGpu(
    @common.Param() params: GpuWhereUniqueInput
  ): Promise<Gpu | null> {
    try {
      return await this.service.deleteGpu({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
